package gosrp

import (
	"fmt"
	"testing"

	"crypto/sha256"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type SrpTestSuite struct {
	suite.Suite
}

func ErrorRandomFunc(length int) ([]byte, error) {
	return nil, fmt.Errorf("Always error")
}

func ConstantRandomFunc(length int) ([]byte, error) {
	bytes := make([]byte, length)
	for i := 0; i < length; i++ {
		bytes[i] = byte(i)
	}

	return bytes, nil
}

func FixedRandomFunc(bytes []byte) RandomFunc {
	return func(length int) ([]byte, error) {
		if length == 32 {
			return bytes, nil
		} else {
			return nil, fmt.Errorf("Expected length of 32")
		}

	}
}

func (suite *SrpTestSuite) SetupTest() {
}

func (suite *SrpTestSuite) TestPrimeByteSizeGetsCalculated() {
	for i := 0; i <= RFC5054_GROUP_4096; i++ {
		srp, _ := NewSrp(i, sha256.New)
		assert.Equal(suite.T(), GROUPS[i].Size/8, srp.primeByteSize)
	}
}

func (suite *SrpTestSuite) TestCreateSaltedVerificationKeyReturnsSalt() {
	srp, _ := NewSrpKDF(RFC5054_GROUP_1024, ScryptKeyDerivation)
	first, _ := srp.CreateSaltedVerificationKey("username", []byte("password"))
	second, _ := srp.CreateSaltedVerificationKey("username", []byte("password"))

	assert.NotNil(suite.T(), first.Salt)
	assert.NotNil(suite.T(), second.Salt)
	assert.NotEqual(suite.T(), first.Salt, second.Salt)
}

func (suite *SrpTestSuite) TestCreateSaltedVerificationKeyReturnsErrorIfRandomFails() {
	srp, _ := NewSrpKDF(RFC5054_GROUP_1024, ScryptKeyDerivation)
	srp.Random = ErrorRandomFunc

	_, err := srp.CreateSaltedVerificationKey("username", []byte("password"))
	assert.Error(suite.T(), err)
}

func (suite *SrpTestSuite) TestCreateSaltedVerificationKeyWithConstantSalt() {
	srp, _ := NewSrpKDF(RFC5054_GROUP_1024, ScryptKeyDerivation)
	srp.Random = ConstantRandomFunc

	verifier, err := srp.CreateSaltedVerificationKey("username", []byte("password"))

	expected_salt := []byte{0x0, 0x1, 0x2, 0x3}
	expected_key := []byte{0xc2, 0x94, 0x1, 0x91, 0xc9, 0x2f, 0x58, 0x59, 0x86, 0xee, 0x9a, 0x88, 0x35, 0x34, 0x47, 0xb2, 0x18, 0x21, 0xc, 0x72, 0xa6, 0x54, 0x28, 0x1d, 0x47, 0x47, 0x85, 0x7e, 0xd6, 0x24, 0xb5, 0x96, 0xb0, 0x6a, 0x96, 0x9f, 0x89, 0x80, 0x6b, 0x6e, 0xf2, 0xb9, 0xdc, 0xa8, 0xa8, 0x4a, 0xed, 0x58, 0x4, 0x68, 0xd8, 0xf6, 0x51, 0x11, 0x20, 0x10, 0x10, 0xc7, 0x4f, 0x39, 0x6e, 0xfc, 0x76, 0xbf, 0xef, 0x4e, 0x53, 0x2e, 0x1c, 0x91, 0x36, 0xcf, 0xef, 0xb0, 0x9a, 0x4a, 0x16, 0xe4, 0x2, 0xac, 0xce, 0x2a, 0x2d, 0xad, 0x9f, 0xdc, 0x25, 0x59, 0x76, 0x86, 0x99, 0xba, 0xd9, 0xf7, 0xf6, 0x79, 0x3a, 0xa9, 0x46, 0x73, 0xca, 0x31, 0xdb, 0x48, 0x52, 0x33, 0xc6, 0x30, 0x5c, 0x3c, 0xc5, 0xfd, 0x3d, 0x92, 0xd9, 0xe, 0x94, 0x28, 0x9c, 0x95, 0xe0, 0x44, 0xca, 0xe4, 0x50, 0x23, 0xb7, 0x7f}

	assert.Nil(suite.T(), err)
	assert.Equal(suite.T(), expected_salt, verifier.Salt)
	assert.Equal(suite.T(), expected_key, verifier.Verifier)
	assert.Equal(suite.T(), "username", verifier.Username)
}

/* Tests that this library produces the same results as the srp python library does.
 *
 * The python code used to generate the output:
 *
 * import srp
 *
 * salt, verifier = srp.create_salted_verification_key('username', 'password', srp.SHA256, srp.NG_1024)
 *
 * print ", 0x".join("{:02x}".format(ord(c)) for c in salt)
 * print ", 0x".join("{:02x}".format(ord(c)) for c in verifier)
 *
 * To be compatible, we expect exactly the same results from our go code
 */
func (suite *SrpTestSuite) TestCreate1024BitVerifierEqualToPytonSrpLibrary() {
	expected_salt := []byte{0x5b, 0x19, 0xff, 0xe1}
	expected_key := []byte{0xbf, 0x11, 0xec, 0x91, 0x1c, 0xd9, 0xc2, 0x09, 0xc4, 0x78, 0x7e, 0x10, 0x4c, 0x45, 0xea, 0xda, 0xa2, 0xb5, 0x67, 0x01, 0x96, 0xee, 0x9d, 0x4a, 0x9f, 0x11, 0xe0, 0xcb, 0xed, 0xb3, 0xe4, 0x75, 0x70, 0x7e, 0xc1, 0xe7, 0x6e, 0x37, 0xe3, 0xab, 0xbf, 0x85, 0x56, 0x77, 0x09, 0xa9, 0xba, 0xe1, 0x05, 0x17, 0x46, 0x83, 0x4f, 0xe9, 0x50, 0xd4, 0x40, 0xfb, 0xf7, 0x7a, 0x2e, 0x00, 0xa8, 0xd0, 0x20, 0xd1, 0xd6, 0x8b, 0xbf, 0xa0, 0xfe, 0x82, 0x7d, 0xb5, 0x47, 0x5e, 0x6e, 0x45, 0xc8, 0x3c, 0x94, 0x67, 0xe0, 0xa3, 0xae, 0x24, 0xd5, 0x32, 0x8d, 0xc4, 0xdd, 0x00, 0x8c, 0x61, 0xb3, 0xb9, 0xbf, 0x18, 0xfd, 0x41, 0xc4, 0xea, 0xfc, 0x3e, 0x9c, 0x7f, 0xd3, 0x2f, 0xc0, 0x77, 0xee, 0x14, 0xaf, 0x63, 0x36, 0x80, 0x44, 0x3a, 0x7e, 0x11, 0x9d, 0x3d, 0x8e, 0x8c, 0x82, 0xaa, 0xe4, 0xb5}
	expected_verifier := &PasswordVerifier{"username", expected_salt, expected_key}

	second_salt := []byte{0x4f, 0xb6, 0x29, 0x75}
	second_key := []byte{0x19, 0x42, 0xdc, 0xf9, 0x84, 0x66, 0xbe, 0x66, 0x49, 0x2f, 0x82, 0x91, 0x53, 0x25, 0xbb, 0x21, 0x2c, 0x4b, 0x07, 0x9b, 0xa6, 0xad, 0x7c, 0xbd, 0x13, 0xc2, 0x9a, 0xe3, 0xf4, 0xb1, 0xe4, 0x31, 0x20, 0x86, 0x6f, 0xbc, 0x34, 0xc5, 0xf3, 0x9c, 0xd5, 0x91, 0xf6, 0xc3, 0xfb, 0xc9, 0xfd, 0x21, 0xb1, 0x3f, 0x92, 0xcb, 0x24, 0x74, 0xd2, 0x2e, 0x88, 0x0c, 0x23, 0x41, 0x82, 0xdf, 0x5a, 0x26, 0x5d, 0xac, 0xc5, 0x88, 0xe1, 0x3b, 0x05, 0x6d, 0x6d, 0xc8, 0x38, 0xd0, 0xab, 0xcf, 0xa3, 0xcb, 0xba, 0x77, 0x14, 0x31, 0xce, 0x10, 0xff, 0xa9, 0x91, 0x42, 0x4c, 0xb0, 0x21, 0xe9, 0xd7, 0x8e, 0xa7, 0x6e, 0x9e, 0xa8, 0x86, 0x01, 0xd4, 0xbc, 0xdb, 0x69, 0xd7, 0x62, 0x84, 0xdb, 0x4f, 0x7d, 0x32, 0x3f, 0xc0, 0x8b, 0x88, 0x21, 0x3e, 0x7d, 0x35, 0x06, 0xa3, 0x7b, 0xe8, 0x93, 0x00, 0x84}
	second_verifier := &PasswordVerifier{"otheruser", second_salt, second_key}

	suite.assertVerificationKey(expected_verifier, "username", []byte("password"))
	suite.assertVerificationKey(second_verifier, "otheruser", []byte("otherpassword"))
}

func (suite *SrpTestSuite) assertVerificationKey(expected_verifier *PasswordVerifier, username string, password []byte) {
	srp, _ := NewSrp(RFC5054_GROUP_1024, sha256.New)
	srp.Random = func(length int) ([]byte, error) {
		return expected_verifier.Salt, nil
	}

	verifier, err := srp.CreateSaltedVerificationKey(username, password)

	assert.Nil(suite.T(), err)
	assert.Equal(suite.T(), expected_verifier, verifier)
}

func TestSrpTestSuite(t *testing.T) {
	suite.Run(t, new(SrpTestSuite))
}
