package gosrp

import (
	"fmt"
	"testing"

	"crypto/sha256"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
	"math/big"
)

func RandomArrayOfSize(size int) []byte {
	array, _ := RandRandomFunc(size)
	return array
}

type VerifierTestSuite struct {
	suite.Suite

	salt          []byte
	verifierBytes []byte
	srp           *Srp
	A             []byte
}

func (suite *VerifierTestSuite) SetupTest() {
	suite.salt = []byte{0x86, 0x27, 0x9c, 0x78}
	suite.verifierBytes = []byte{0xe3, 0xc9, 0xcd, 0x13, 0x35, 0x3a, 0x2a, 0xfc, 0x86, 0x87, 0xc6, 0x73, 0x14, 0xfa, 0xdb, 0x8c, 0x66, 0x4f, 0x58, 0x70, 0xff, 0x2e, 0x8e, 0x90, 0xdf, 0xcf, 0x29, 0x5e, 0x83, 0x84, 0xce, 0xa6, 0xd0, 0xc9, 0xba, 0x3c, 0x98, 0x64, 0xdc, 0x6b, 0xfd, 0xb8, 0xf2, 0x42, 0x81, 0xa6, 0x65, 0x9f, 0x9b, 0x7c, 0xd3, 0xe9, 0x11, 0x59, 0x2d, 0xe1, 0xb6, 0x65, 0xa4, 0x39, 0xc8, 0xd7, 0x38, 0x85, 0xbf, 0xd5, 0xb9, 0x79, 0x50, 0x22, 0xad, 0x9a, 0xc9, 0xd7, 0xbd, 0xdf, 0xbd, 0x1c, 0x9c, 0x46, 0x91, 0x2a, 0x82, 0x96, 0x64, 0xf5, 0xa6, 0x1f, 0x46, 0xc6, 0x48, 0x25, 0x20, 0x14, 0xd5, 0xd3, 0x7e, 0x48, 0xeb, 0x08, 0xcf, 0x8c, 0x11, 0x1e, 0xa8, 0xdd, 0x7a, 0xbe, 0xcc, 0xe0, 0x3a, 0x43, 0xd3, 0xdb, 0xe4, 0xdf, 0x07, 0x4d, 0x9a, 0xb7, 0x70, 0xc8, 0x14, 0x3e, 0x47, 0x5a, 0x25, 0x55}
	suite.A = []byte{0x6a, 0x03, 0x29, 0x15, 0xde, 0xf4, 0xb5, 0x24, 0x6b, 0x90, 0x1e, 0x69, 0xd0, 0xfe, 0x62, 0xbc, 0x2f, 0x3c, 0xd9, 0x28, 0xb4, 0xdd, 0xc5, 0xad, 0xce, 0x37, 0x74, 0xf0, 0xcc, 0x2e, 0x28, 0x9c, 0x28, 0xd9, 0xa4, 0x48, 0x76, 0xfa, 0x3e, 0x91, 0x92, 0x92, 0x34, 0x3f, 0xee, 0xf3, 0x3b, 0xe6, 0xad, 0x37, 0x73, 0x1a, 0x91, 0xf5, 0xc8, 0x58, 0x97, 0xb6, 0x8f, 0x18, 0x0c, 0xb2, 0xbb, 0x1b, 0x53, 0x6d, 0xfb, 0xfc, 0x00, 0xee, 0xbd, 0x4c, 0x7c, 0x12, 0x49, 0x4c, 0xd0, 0x77, 0x93, 0x55, 0xdc, 0x2b, 0x1a, 0xc3, 0x9f, 0xbd, 0x9b, 0x21, 0xa2, 0x5a, 0x1d, 0x2e, 0x3f, 0xe4, 0x78, 0x74, 0xfc, 0x3d, 0xe9, 0xee, 0x24, 0xbf, 0x11, 0x7f, 0x71, 0xf0, 0x4e, 0xb9, 0x49, 0x88, 0x3b, 0x73, 0xd3, 0xd8, 0x9d, 0xa4, 0xce, 0xe4, 0x07, 0xcc, 0xf2, 0x90, 0x08, 0xcd, 0x41, 0xb4, 0x07, 0x81}

	suite.srp, _ = NewSrp(RFC5054_GROUP_1024, sha256.New)
}

func (suite *VerifierTestSuite) TestCalculatesSameValueForKasPythonSrp() {
	expected_k := new(big.Int)
	kStr := "86573327224338306107651058129804478514389186525412459359309666303778337427184"
	fmt.Sscan(kStr, expected_k)

	passwordVerifier := PasswordVerifier{Username: "username", Salt: suite.salt, Verifier: suite.verifierBytes}

	verifier := NewVerifier(suite.srp, passwordVerifier)

	assert.Equal(suite.T(), expected_k, verifier.k)
}

func (suite *VerifierTestSuite) TestStartAuthenticationVerifiesAIsNotN() {
	passwordVerifier := PasswordVerifier{Username: "username", Salt: suite.salt, Verifier: suite.verifierBytes}

	verifier := NewVerifier(suite.srp, passwordVerifier)

	assert.Error(suite.T(), verifier.StartAuthentication(suite.srp.cyclicGroup.Prime.Bytes()))
}

func (suite *VerifierTestSuite) TestStartAuthenticationVerifiesSizeOfA() {
	passwordVerifier := PasswordVerifier{Username: "username", Salt: suite.salt, Verifier: suite.verifierBytes}

	verifier := NewVerifier(suite.srp, passwordVerifier)

	assert.Error(suite.T(), verifier.StartAuthentication([]byte{}))
	assert.Error(suite.T(), verifier.StartAuthentication(RandomArrayOfSize(31)))
	assert.Error(suite.T(), verifier.StartAuthentication(RandomArrayOfSize(33)))
	assert.NoError(suite.T(), verifier.StartAuthentication(RandomArrayOfSize(128)))
}

func (suite *VerifierTestSuite) TestEphemeralSecretBIsRandom() {
	//given
	b := []byte{0xd8, 0x10, 0x05, 0x71, 0xa4, 0x72, 0x34, 0x0e, 0x80, 0x84, 0x4c, 0x6a, 0x2e, 0x7d, 0xc5, 0x4a, 0xfc, 0x1c, 0xd1, 0xfe, 0x61, 0x2c, 0x8b, 0x46, 0x47, 0xd2, 0x19, 0x81, 0x29, 0x43, 0x69, 0xd6}
	expectedB := new(big.Int).SetBytes([]byte{0x37, 0xc3, 0x3f, 0x07, 0xc5, 0x7b, 0x3b, 0x6f, 0x67, 0xd1, 0x74, 0x3e, 0x24, 0xa7, 0xd0, 0xe5, 0x99, 0x97, 0xf6, 0x98, 0x2d, 0xf3, 0xdb, 0x4b, 0x6c, 0xea, 0x4c, 0xa6, 0x9a, 0x2f, 0x83, 0xc8, 0x54, 0x4e, 0x9c, 0x93, 0x67, 0x7a, 0x08, 0x8f, 0x3f, 0xe7, 0x2b, 0x3a, 0xaf, 0x8d, 0x2b, 0x31, 0x41, 0x8f, 0x16, 0xa2, 0xae, 0xd1, 0x4e, 0xf0, 0x28, 0xd7, 0x53, 0xeb, 0x8c, 0xec, 0xd4, 0xde, 0xd9, 0x59, 0x50, 0x7b, 0xc9, 0x86, 0xb4, 0xe8, 0x1c, 0xc4, 0xed, 0x79, 0x7c, 0x1d, 0xda, 0xaf, 0x7c, 0x9d, 0xc4, 0x5d, 0x34, 0x46, 0x18, 0x60, 0xcb, 0xcc, 0xbd, 0xfb, 0x9a, 0xaa, 0x02, 0x5f, 0x70, 0x6f, 0x98, 0x42, 0x70, 0x3c, 0xd2, 0x70, 0x43, 0xd4, 0x5f, 0xcf, 0x74, 0x14, 0x71, 0xf4, 0xe5, 0x80, 0x95, 0xc2, 0x69, 0x84, 0xc0, 0x4d, 0xf1, 0x50, 0xa8, 0xdc, 0xb9, 0xf1, 0xc0, 0xa2})

	suite.srp.Random = FixedRandomFunc(b)

	passwordVerifier := PasswordVerifier{Username: "username", Salt: suite.salt, Verifier: suite.verifierBytes}

	verifier := NewVerifier(suite.srp, passwordVerifier)

	// when
	verifier.StartAuthentication(RandomArrayOfSize(128))
	verifier.Challenge()

	// then
	assert.Equal(suite.T(), b, verifier.b)
	assert.Equal(suite.T(), expectedB, verifier.B)
}

func (suite *VerifierTestSuite) TestChallenge() {
	//given
	b := []byte{0xd8, 0x10, 0x05, 0x71, 0xa4, 0x72, 0x34, 0x0e, 0x80, 0x84, 0x4c, 0x6a, 0x2e, 0x7d, 0xc5, 0x4a, 0xfc, 0x1c, 0xd1, 0xfe, 0x61, 0x2c, 0x8b, 0x46, 0x47, 0xd2, 0x19, 0x81, 0x29, 0x43, 0x69, 0xd6}
	expectedB := new(big.Int).SetBytes([]byte{0x37, 0xc3, 0x3f, 0x07, 0xc5, 0x7b, 0x3b, 0x6f, 0x67, 0xd1, 0x74, 0x3e, 0x24, 0xa7, 0xd0, 0xe5, 0x99, 0x97, 0xf6, 0x98, 0x2d, 0xf3, 0xdb, 0x4b, 0x6c, 0xea, 0x4c, 0xa6, 0x9a, 0x2f, 0x83, 0xc8, 0x54, 0x4e, 0x9c, 0x93, 0x67, 0x7a, 0x08, 0x8f, 0x3f, 0xe7, 0x2b, 0x3a, 0xaf, 0x8d, 0x2b, 0x31, 0x41, 0x8f, 0x16, 0xa2, 0xae, 0xd1, 0x4e, 0xf0, 0x28, 0xd7, 0x53, 0xeb, 0x8c, 0xec, 0xd4, 0xde, 0xd9, 0x59, 0x50, 0x7b, 0xc9, 0x86, 0xb4, 0xe8, 0x1c, 0xc4, 0xed, 0x79, 0x7c, 0x1d, 0xda, 0xaf, 0x7c, 0x9d, 0xc4, 0x5d, 0x34, 0x46, 0x18, 0x60, 0xcb, 0xcc, 0xbd, 0xfb, 0x9a, 0xaa, 0x02, 0x5f, 0x70, 0x6f, 0x98, 0x42, 0x70, 0x3c, 0xd2, 0x70, 0x43, 0xd4, 0x5f, 0xcf, 0x74, 0x14, 0x71, 0xf4, 0xe5, 0x80, 0x95, 0xc2, 0x69, 0x84, 0xc0, 0x4d, 0xf1, 0x50, 0xa8, 0xdc, 0xb9, 0xf1, 0xc0, 0xa2})

	suite.srp.Random = FixedRandomFunc(b)

	passwordVerifier := PasswordVerifier{Username: "username", Salt: suite.salt, Verifier: suite.verifierBytes}

	verifier := NewVerifier(suite.srp, passwordVerifier)

	// when
	verifier.StartAuthentication(RandomArrayOfSize(128))
	salt, B, err := verifier.Challenge()

	// then
	assert.NoError(suite.T(), err)
	assert.Equal(suite.T(), suite.salt, salt)
	assert.Equal(suite.T(), expectedB.Bytes(), B)
}

func (suite *VerifierTestSuite) TestVerifySession() {
	//given
	b := []byte{0xd8, 0x10, 0x05, 0x71, 0xa4, 0x72, 0x34, 0x0e, 0x80, 0x84, 0x4c, 0x6a, 0x2e, 0x7d, 0xc5, 0x4a, 0xfc, 0x1c, 0xd1, 0xfe, 0x61, 0x2c, 0x8b, 0x46, 0x47, 0xd2, 0x19, 0x81, 0x29, 0x43, 0x69, 0xd6}
	// expectedB := new(big.Int).SetBytes([]byte{0x37, 0xc3, 0x3f, 0x07, 0xc5, 0x7b, 0x3b, 0x6f, 0x67, 0xd1, 0x74, 0x3e, 0x24, 0xa7, 0xd0, 0xe5, 0x99, 0x97, 0xf6, 0x98, 0x2d, 0xf3, 0xdb, 0x4b, 0x6c, 0xea, 0x4c, 0xa6, 0x9a, 0x2f, 0x83, 0xc8, 0x54, 0x4e, 0x9c, 0x93, 0x67, 0x7a, 0x08, 0x8f, 0x3f, 0xe7, 0x2b, 0x3a, 0xaf, 0x8d, 0x2b, 0x31, 0x41, 0x8f, 0x16, 0xa2, 0xae, 0xd1, 0x4e, 0xf0, 0x28, 0xd7, 0x53, 0xeb, 0x8c, 0xec, 0xd4, 0xde, 0xd9, 0x59, 0x50, 0x7b, 0xc9, 0x86, 0xb4, 0xe8, 0x1c, 0xc4, 0xed, 0x79, 0x7c, 0x1d, 0xda, 0xaf, 0x7c, 0x9d, 0xc4, 0x5d, 0x34, 0x46, 0x18, 0x60, 0xcb, 0xcc, 0xbd, 0xfb, 0x9a, 0xaa, 0x02, 0x5f, 0x70, 0x6f, 0x98, 0x42, 0x70, 0x3c, 0xd2, 0x70, 0x43, 0xd4, 0x5f, 0xcf, 0x74, 0x14, 0x71, 0xf4, 0xe5, 0x80, 0x95, 0xc2, 0x69, 0x84, 0xc0, 0x4d, 0xf1, 0x50, 0xa8, 0xdc, 0xb9, 0xf1, 0xc0, 0xa2})
	m := []byte{0x91, 0xcb, 0x75, 0x91, 0xf5, 0x22, 0x16, 0x1f, 0x40, 0x31, 0x43, 0xb9, 0xc9, 0xaa, 0x8d, 0x8f, 0x23, 0xf2, 0x3b, 0xb7, 0x55, 0xfb, 0x44, 0xea, 0x3d, 0x95, 0xa6, 0x8c, 0x99, 0xab, 0x7c, 0x1e}

	expectedHAMK := []byte{0x4b, 0x45, 0xdd, 0xb4, 0x5b, 0x31, 0x36, 0x8e, 0x88, 0x2e, 0x70, 0xce, 0xc4, 0xbc, 0x03, 0xda, 0xaa, 0xb8, 0x6f, 0x08, 0x1a, 0xd3, 0x11, 0xe4, 0xf3, 0x46, 0xd9, 0x23, 0xc0, 0xdd, 0x53, 0x33}

	suite.srp.Random = FixedRandomFunc(b)

	passwordVerifier := PasswordVerifier{Username: "username", Salt: suite.salt, Verifier: suite.verifierBytes}

	verifier := NewVerifier(suite.srp, passwordVerifier)

	// when
	verifier.StartAuthentication(suite.A)
	verifier.Challenge()
	hAMK, err := verifier.VerifySession(m)

	assert.NoError(suite.T(), err)
	assert.Equal(suite.T(), expectedHAMK, hAMK)
}

func TestVerifierTestSuite(t *testing.T) {
	suite.Run(t, new(VerifierTestSuite))
}
